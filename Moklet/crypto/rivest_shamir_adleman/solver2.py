from pwn import *
from math import isqrt
from Crypto.Util.number import inverse

def solve(C, N, L):
    poss = []
    mlim = 2**20
    for x in range(1, mlim):
        a = x
        b = L - N - x**2
        c = x * N
        d = b**2 - 4*a*c
        if d < 0:
            continue
        qform = (-b + isqrt(d)) // (2*a)
        p = N // qform
        if (p - x) * (qform - x) == L:
            poss.append(qform)
            break

    if not poss:
        print("No valid factors found")
        return None

    p, q = poss[0], N // poss[0]
    phi = (p - 1) * (q - 1)
    e = 65537
    d = inverse(e, phi)
    decrypted = pow(C, d, N)
    return decrypted

# Call the function with the given values
c = 21901206181831493461128944577565259138502168942633254928022945796466129550532491415677007761763142486921215161742226806370681261119168033046484407549388664381391878836790168320693314380871936956016953777164135603865326500414753386377050488012392808288136997975244015118896303035408163230209288041786990461497685550096961499094452083976975011206516256692118738476736265746021445304134183385262447852394746829727990910625901005834469926226135576999261171312684875695443667442238178792852794843131222156023905027966468657613869147464099482232319693310907652230417015456972130934038332748310684798783347648756253465455428
n = 24084055777426605498155947906472309944945171489450555903616493530762569304128681263887345422417055837924646708962678581091058132295865708389521684150345619399741591481960547415282390879919551629086805602306064024767445777690441129787474391809113626581264757493710720478805974747826277334119210850393525078146849968950020481691253583799506365395889578061483584724798433137600517188796680014836386695474779370522570989572002638989218394693981446176995321737107042371917949626079613329550692477655334745634040053048231856566606302321701136006742533525189418575773400801209875597090644970035020466595741111406968426616537
dont_leak_this = 2347141390772946206908633516013503076203072100656261991911579484550728594098472544057838889746992122892736074491787066869960627301658682854581343747953150917927461561676057447136371307884908903415159645231315963143960428049784430983793762309520097794736454397045448549820822289871229945980694557685477244104550868973745057271820031082733119732578589058637647766973800782447541189693516499218787455757999345214638490101978014735872670256583837631809601340609624735377742419683138760148662077069141454474096574336092072301161774786778644748755321168253831978799703667910500163752284881890300702985422741918808280070009201554960706173673292257283108796309784989876035748358955658854936162762834109838732490561437707587190165950746009304881043553606409162283891032575160343012397078806666132341556594189375106489585879960816616573728778794141263744712744315800951709489720407964655109457359060723343987616788213126760608243814990041255545270950332130409267060531479554286949152226694016893206871459880105843456114088624796240214413080821480594666487705644768015871784926736688252723482145486923201095459794195968542769797047487458118982334067603695857261743018222307938148164178475240168738045364346217600329979861935004136251901329774778
result = solve(c, n, dont_leak_this)
print(result)

# Additional condition where p = L % N and q = N / p
p = dont_leak_this % n
q = n // p
print(f"Additional condition factors: p = {p}, q = {q}")

# Calculating the decryption key and decrypting the message
phi = (p - 1) * (q - 1)
e = 65537
d = inverse(e, phi)
decrypted = pow(c, d, n)
print(decrypted)
